
public class Problems {
	int sum1 = 0;
	Problems() {
		problem2(1, 2);
		long p3 = 10086647l; // 10086647 * 839 = 8462696833, 8462696833 * 71 = 600851475143
		//problem3(p3);
		System.out.println("");
		problem6(100);
	}
	public static void main(String[] args) {
		Problems p = new Problems();
	}
	
	/* PROBLEM 1----------------------------------
	 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
	 * The sum of these multiples is 23.
	 * Find the sum of all the multiples of 3 or 5 below 1000.*/
	public void problem1(int range) {
		int sum = 0;
		for (int i = 1; i < range; i++) {
			if (i % 3 == 0 || i % 5 == 0) {
				sum += i;
			}
		}
		System.out.println(sum);
	}
	
	/* PROBLEM 2----------------------------------
	 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
	 * By starting with 1 and 2, the first 10 terms will be:
	 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	 * By considering the terms in the Fibonacci sequence whose values do not exceed 
	 * four million, find the sum of the even-valued terms.*/
	public void problem2(int x, int y) {
		int num = x + y;
	/*	System.out.println(x); */
		if (num > 4000000) { System.out.print("sum= " + (sum1 + 2)); return; }
		if (num % 2 == 0) {
			sum1 += num;
		}
		//System.out.println(x);
		problem2(y, num);
	}
	/* PROBLEM 3-----------------------------------
	 * The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600,851,475,143 ? */
	// 91 = 7, 13, 
	public void problem3(long num) {
		int answer = 1;
		for (int i = 2; i < num; i++) {
			if(num % i == 0) {
				if(isPrime(i)) {
					answer = i;
				}
			}
		}
		System.out.println("answer= " + answer);
	}
	public boolean isPrime(int n) {
		for(int i = 2; i < n; i++) {
			if(n % i == 0) {
				return false;
			}
		}
		return true;
	}
	/* PROBLEM 4--------------------------
	 * A palindromic number reads the same both ways. 
	 * The largest palindrome made from the product of 
	 * two 2-digit numbers is 9009 = 91 × 99.
	 * Find the largest palindrome made from the product of two 3-digit numbers. */
	 public void problem4() {
		 int ans = 0;
		 for(int i = 100; i < 1000; i++) {
			 for(int j = 100; j < 1000; j++) {
				 int temp = i * j;
				 if(isPalindrome(temp)) {
					 if (temp > ans) {
						 ans = temp;
						 System.out.println(ans);
					 }
				 }
			 }
		 }
		 System.out.println("final answer= " + ans);
	 }
	 public boolean isPalindrome(int num) {
		 String numStr = num + "";
		 for (int i = 0; i < numStr.length() / 2; i++) {
			 char a = numStr.charAt(i);
			 char b = numStr.charAt(numStr.length() - 1 - i);
			 if(a != b) return false; 
		 }
		 return true;
	 }
	/*PROBLEM 5---------------------------
	 * smallest multiple */
	 public int problem5() {
		 int num = 20;
		 //2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder
		 while(true) {
			 int count = 0;
			 for(int i = 1; i < 21; i++) {
				 if(num % i == 0) {
					 count++;
				 }
			 }
			 if(count == 20) {
				 return num;
			 }
			 num++;
		 }
	 }
	 /*PROBLEM 6---------------------------
		 * Sum Square Difference */
	 public void problem6(int max) {
		 int sumSquares = 0;
		 int squareSum = 0;
		 for(int i = 1; i <= max; i++) {
			 sumSquares += i*i;
			 squareSum += i;
		 }
		 squareSum = squareSum * squareSum;
		 System.out.println(squareSum - sumSquares);
	 }
} 
