import java.lang.Math; 

public class Problems {
	int sum1 = 0;
	Problems() {
		//problem2(1, 2);
		long p3 = 10086647l; // 10086647 * 839 = 8462696833, 8462696833 * 71 = 600851475143
		//problem3(p3);
		System.out.println("");
		//problem6(100);
		//problem7(10001);
		//problem8(13);
		//problem9(1000);
		problem11();
	}
	public static void main(String[] args) {
		Problems p = new Problems();
	}
	
	/* PROBLEM 1----------------------------------
	 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
	 * The sum of these multiples is 23.
	 * Find the sum of all the multiples of 3 or 5 below 1000.*/
	public void problem1(int range) {
		int sum = 0;
		for (int i = 1; i < range; i++) {
			if (i % 3 == 0 || i % 5 == 0) {
				sum += i;
			}
		}
		System.out.println(sum);
	}
	
	/* PROBLEM 2----------------------------------
	 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
	 * By starting with 1 and 2, the first 10 terms will be:
	 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	 * By considering the terms in the Fibonacci sequence whose values do not exceed 
	 * four million, find the sum of the even-valued terms.*/
	public void problem2(int x, int y) {
		int num = x + y;
	/*	System.out.println(x); */
		if (num > 4000000) { System.out.print("sum= " + (sum1 + 2)); return; }
		if (num % 2 == 0) {
			sum1 += num;
		}
		//System.out.println(x);
		problem2(y, num);
	}
	/* PROBLEM 3-----------------------------------
	 * The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600,851,475,143 ? */
	// 91 = 7, 13, 
	public void problem3(long num) {
		int answer = 1;
		for (int i = 2; i < num; i++) {
			if(num % i == 0) {
				if(isPrime(i)) {
					answer = i;
				}
			}
		}
		System.out.println("answer= " + answer);
	}
	public boolean isPrime(int n) {
		for(int i = 2; i < n; i++) {
			if(n % i == 0) {
				return false;
			}
		}
		return true;
	}
	/* PROBLEM 4--------------------------
	 * A palindromic number reads the same both ways. 
	 * The largest palindrome made from the product of 
	 * two 2-digit numbers is 9009 = 91 × 99.
	 * Find the largest palindrome made from the product of two 3-digit numbers. */
	 public void problem4() {
		 int ans = 0;
		 for(int i = 100; i < 1000; i++) {
			 for(int j = 100; j < 1000; j++) {
				 int temp = i * j;
				 if(isPalindrome(temp)) {
					 if (temp > ans) {
						 ans = temp;
						 System.out.println(ans);
					 }
				 }
			 }
		 }
		 System.out.println("final answer= " + ans);
	 }
	 public boolean isPalindrome(int num) {
		 String numStr = num + "";
		 for (int i = 0; i < numStr.length() / 2; i++) {
			 char a = numStr.charAt(i);
			 char b = numStr.charAt(numStr.length() - 1 - i);
			 if(a != b) return false; 
		 }
		 return true;
	 }
	/*PROBLEM 5---------------------------
	 * smallest multiple */
	 public int problem5() {
		 int num = 20;
		 //2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder
		 while(true) {
			 int count = 0;
			 for(int i = 1; i < 21; i++) {
				 if(num % i == 0) {
					 count++;
				 }
			 }
			 if(count == 20) {
				 return num;
			 }
			 num++;
		 }
	 }
	 /*PROBLEM 6---------------------------
		 * Sum Square Difference */
	 public void problem6(int max) {
		 int sumSquares = 0;
		 int squareSum = 0;
		 for(int i = 1; i <= max; i++) {
			 sumSquares += i*i;
			 squareSum += i;
		 }
		 squareSum = squareSum * squareSum;
		 System.out.println(squareSum - sumSquares);
	 }
	 /*PROBLEM 7---------------------------
		 * 10001st prime */
	 public void problem7(int place) {
		 int currentPlace = 0;
		 int num = 1;
		 while(true) {
			 if(isPrime(num)) {
				 if(currentPlace == place) {
					 System.out.println("place " + place + " is prime number " + num);
					 return;
				 }
				 currentPlace++;
			 }
 			 num++;
		 }
	 }
	 /*PROBLEM 8---------------------------
		 * Largest product in a series */
	 public void problem8(int max) {
		 long product = 1;
		 long tempProduct = 1;
		 String n = "";
		 String thousNum = "73167176531330624919225119674426574742355349194934" + 
		 		"96983520312774506326239578318016984801869478851843" + 
		 		"85861560789112949495459501737958331952853208805511" + 
		 		"12540698747158523863050715693290963295227443043557" + 
		 		"66896648950445244523161731856403098711121722383113" + 
		 		"62229893423380308135336276614282806444486645238749" + 
		 		"30358907296290491560440772390713810515859307960866" + 
		 		"70172427121883998797908792274921901699720888093776" + 
		 		"65727333001053367881220235421809751254540594752243" + 
		 		"52584907711670556013604839586446706324415722155397" + 
		 		"53697817977846174064955149290862569321978468622482" + 
		 		"83972241375657056057490261407972968652414535100474" + 
		 		"82166370484403199890008895243450658541227588666881" + 
		 		"16427171479924442928230863465674813919123162824586" + 
		 		"17866458359124566529476545682848912883142607690042" + 
		 		"24219022671055626321111109370544217506941658960408" + 
		 		"07198403850962455444362981230987879927244284909188" + 
		 		"84580156166097919133875499200524063689912560717606" + 
		 		"05886116467109405077541002256983155200055935729725" + 
		 		"71636269561882670428252483600823257530420752963450";
		 for(int i = 0; i < thousNum.length() - max; i++) { //2091059712
			 	tempProduct = 1;
			 	String temp = "";
				 for(int j = 0; j < max; j++) {
					 tempProduct *= (thousNum.charAt(i + j) - '0');
					 temp += thousNum.charAt(i+j) + "";
				 }
			 if (tempProduct > product) {
				 product = tempProduct;
				 n = temp;
			 }
		 }
		 System.out.println("product is " + product);
		 System.out.println("product string is " + n);
	 }
	 /*PROBLEM 9---------------------------
		 * Special Pythagorean triplet */
	 public void problem9(int max) {
		 for(int a = 1; a < 500; a++) {
			 for(int b = a + 1; b < 500; b++) {
				 int cSquare = a*a + b*b;
				 double c = Math.sqrt(cSquare);
				 if(c % 1 == 0) {
					// System.out.println(a + ", " + b + ", " + c);
					 if(a + b + c == 1000) {
						 System.out.println("bingo!");
						 System.out.println(a + ", " + b + ", " + c);
						 System.out.println(a*b*c);
					 }
				 }
				 
			 }
		 }
	 }
	 /*PROBLEM 10---------------------------
		 * Summation of primes */
	 public void problem10() {
		 int sum = 0;
		 for(int i = 2; i < 2000000; i++) {
			 if(isPrime(i)) {
				 sum += i;
			 }
		 }
		 System.out.println(sum);
	 }
	 /*PROBLEM 11---------------------------
		 * Largest product in a grid */
	 public void problem11() {
		 int[] numArr = new int[400];
		 int index = 0;
		 int bigNum = 1;
		 String str = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 " + 
		 		"49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 " + 
		 		"81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 " + 
		 		"52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 " + 
		 		"22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 " + 
		 		"24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 " + 
		 		"32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 " + 
		 		"67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 " + 
		 		"24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 " + 
		 		"21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 " + 
		 		"78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 " + 
		 		"16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 " + 
		 		"86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 " + 
		 		"19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 " + 
		 		"04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 " + 
		 		"88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 " + 
		 		"04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 " + 
		 		"20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 " + 
		 		"20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 " + 
		 		"01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";
		 
		 for(int i = 0; i < str.length() - 1 ; i+=3) {
		    int n10 = (str.charAt(i) - '0') * 10;
		    int n1 = str.charAt(i + 1) - '0';
		    numArr[index] = n10 + n1;
		    index++;
		 }
		 for(int i = 0; i < numArr.length - 3; i++) {
			 int temp = 1;
			 if(!isRightEdge(i)) { // if last 3 side to side, dont check
				 int right = numArr[i] * numArr[i+1] * numArr[i+2] * numArr[i+3]; 
				 if (right > temp) { temp = right; }
				 if(i < 340) {
					 int horizRight = numArr[i] * numArr[i+21] * numArr[i+42] * numArr[i+63];
					 if (horizRight > temp) { temp = horizRight; }
				 }
			 }
			 if(i < 340) { //if last 3 down, dont check
				int down = numArr[i] * numArr[i+20] * numArr[i+40] * numArr[i+60];
			 	if (down > temp) { temp = down; }
			 }
			 if(i > 2 && !isLeftEdge(i) && i < 340) {
				 int horizLeft = numArr[i] * numArr[i+19] * numArr[i+38] * numArr[i+57];
				 if (horizLeft > temp) { temp = horizLeft; }
			 }
			 if(temp > bigNum) {
				 bigNum = temp;
			 }
		 } 
		 System.out.println(bigNum);
	 }
	 public boolean isRightEdge(int index) {
		 for(int i = 20; i < 341; i+=20) {
			 if(i - 1 == index || i - 2 == index || i - 3 == index) {
				 return true;
			 }
		 }
		 return false;
	 }
	 public boolean isLeftEdge(int index) {
		 for(int i = 0; i < 341; i+=20) {
			 if(i == index || i + 1 == index || i + 2 == index) {
				 return true;
			 }
		 }
		 return false;
	 }
} 
